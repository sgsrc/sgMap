/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.sgsrc.map.jni;

import java.io.Serializable;

public class FeatureCanvas implements Serializable {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected FeatureCanvas(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0)
        throw new RuntimeException();
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  
  public static long getCPtr(FeatureCanvas obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

	private static final long serialVersionUID = 9042243014632966352L;

  public int GetSize() {
    return jniJNI.FeatureCanvas_GetSize(swigCPtr, this);
  }

  public FeatureLayer GetActive() {
    long cPtr = jniJNI.FeatureCanvas_GetActive(swigCPtr, this);
    return (cPtr == 0) ? null : new FeatureLayer(cPtr, false);
  }

  public void SetActive(FeatureLayer h) {
    jniJNI.FeatureCanvas_SetActive(swigCPtr, this, FeatureLayer.getCPtr(h), h);
  }

  public FeatureCollection GetSelection() {
    long cPtr = jniJNI.FeatureCanvas_GetSelection(swigCPtr, this);
    return (cPtr == 0) ? null : new FeatureCollection(cPtr, false);
  }

  public FeatureCollection GetFlashset() {
    long cPtr = jniJNI.FeatureCanvas_GetFlashset(swigCPtr, this);
    return (cPtr == 0) ? null : new FeatureCollection(cPtr, false);
  }

  public Transaction GetTransaction() {
    long cPtr = jniJNI.FeatureCanvas_GetTransaction(swigCPtr, this);
    return (cPtr == 0) ? null : new Transaction(cPtr, false);
  }

  public Feature GetFeatureAtPoint(double dlX, double dlY, double dlBuffer) {
    long cPtr = jniJNI.FeatureCanvas_GetFeatureAtPoint(swigCPtr, this, dlX, dlY, dlBuffer);
    return (cPtr == 0) ? null : new Feature(cPtr, false);
  }

  public FeatureCollection GetFeaturesAtPoint(double dlX, double dlY, double dlBuffer) {
    long cPtr = jniJNI.FeatureCanvas_GetFeaturesAtPoint(swigCPtr, this, dlX, dlY, dlBuffer);
    return (cPtr == 0) ? null : new FeatureCollection(cPtr, false);
  }

  public int Contains(FeatureLayer h) {
    return jniJNI.FeatureCanvas_Contains(swigCPtr, this, FeatureLayer.getCPtr(h), h);
  }

  public void AddFeatureLayer(FeatureLayer h) {
    jniJNI.FeatureCanvas_AddFeatureLayer(swigCPtr, this, FeatureLayer.getCPtr(h), h);
  }

  public void DeleteFeatureLayer(FeatureLayer h) {
    jniJNI.FeatureCanvas_DeleteFeatureLayer(swigCPtr, this, FeatureLayer.getCPtr(h), h);
  }

  public FeatureLayer GetFeatureLayer(int index) {
    long cPtr = jniJNI.FeatureCanvas_GetFeatureLayer(swigCPtr, this, index);
    return (cPtr == 0) ? null : new FeatureLayer(cPtr, false);
  }

  public FeatureLayer GetFeatureLayerByName(String name) {
    long cPtr = jniJNI.FeatureCanvas_GetFeatureLayerByName(swigCPtr, this, name);
    return (cPtr == 0) ? null : new FeatureLayer(cPtr, false);
  }

  public FeatureLayer GetFeatureLayerByID(String id) {
    long cPtr = jniJNI.FeatureCanvas_GetFeatureLayerByID(swigCPtr, this, id);
    return (cPtr == 0) ? null : new FeatureLayer(cPtr, false);
  }

  public FeatureLayer GetFeatureLayerByLayer(Layer layer) {
    long cPtr = jniJNI.FeatureCanvas_GetFeatureLayerByLayer(swigCPtr, this, Layer.getCPtr(layer), layer);
    return (cPtr == 0) ? null : new FeatureLayer(cPtr, false);
  }

  public int DeleteFeatureCollection(FeatureCollection h) {
    return jniJNI.FeatureCanvas_DeleteFeatureCollection(swigCPtr, this, FeatureCollection.getCPtr(h), h);
  }

  public int GetIndexOfFeatureLayer(FeatureLayer h) {
    return jniJNI.FeatureCanvas_GetIndexOfFeatureLayer(swigCPtr, this, FeatureLayer.getCPtr(h), h);
  }

  public void Undo() {
    jniJNI.FeatureCanvas_Undo(swigCPtr, this);
  }

  public void Commit() {
    jniJNI.FeatureCanvas_Commit(swigCPtr, this);
  }

  public void Copy() {
    jniJNI.FeatureCanvas_Copy(swigCPtr, this);
  }

  public void Paste() {
    jniJNI.FeatureCanvas_Paste(swigCPtr, this);
  }

  public void Cut() {
    jniJNI.FeatureCanvas_Cut(swigCPtr, this);
  }

  public boolean MoveTo(FeatureLayer h, int index) {
    return jniJNI.FeatureCanvas_MoveTo(swigCPtr, this, FeatureLayer.getCPtr(h), h, index);
  }

  public void Invalidate() {
    jniJNI.FeatureCanvas_Invalidate(swigCPtr, this);
  }

  public void GetBounds(double[] argout) {
    jniJNI.FeatureCanvas_GetBounds(swigCPtr, this, argout);
  }

  public void ReCalculateExtent(int nForceAll) {
    jniJNI.FeatureCanvas_ReCalculateExtent(swigCPtr, this, nForceAll);
  }

  public LayerSource AddLayerSource(String pszConn) {
    long cPtr = jniJNI.FeatureCanvas_AddLayerSource(swigCPtr, this, pszConn);
    return (cPtr == 0) ? null : new LayerSource(cPtr, false);
  }

  public void DeleteFeatureLayerAll() {
    jniJNI.FeatureCanvas_DeleteFeatureLayerAll(swigCPtr, this);
  }

  public int ShowOpenVectorLayerWidget(String pszTitle) {
    return jniJNI.FeatureCanvas_ShowOpenVectorLayerWidget(swigCPtr, this, pszTitle);
  }

  public int ShowOpenRasterLayerWidget(String pszTitle) {
    return jniJNI.FeatureCanvas_ShowOpenRasterLayerWidget(swigCPtr, this, pszTitle);
  }

  public void ShowOpenWebLayerWidget() {
    jniJNI.FeatureCanvas_ShowOpenWebLayerWidget(swigCPtr, this);
  }

  public void ShowNewVectorLayerWidget() {
    jniJNI.FeatureCanvas_ShowNewVectorLayerWidget(swigCPtr, this);
  }

  public void AddEventListener(Event h) {
    jniJNI.FeatureCanvas_AddEventListener(swigCPtr, this, Event.getCPtr(h), h);
  }

  public void RemoveEventListener(Event h) {
    jniJNI.FeatureCanvas_RemoveEventListener(swigCPtr, this, Event.getCPtr(h), h);
  }

  public boolean HasEventListener(Event h) {
    return jniJNI.FeatureCanvas_HasEventListener(swigCPtr, this, Event.getCPtr(h), h);
  }

  public void FireEvent(String pszName, Parameters params) {
    jniJNI.FeatureCanvas_FireEvent(swigCPtr, this, pszName, Parameters.getCPtr(params), params);
  }

  public LayerSource GetLayerSourceFromFileName(String pszFileName) {
    long cPtr = jniJNI.FeatureCanvas_GetLayerSourceFromFileName(swigCPtr, this, pszFileName);
    return (cPtr == 0) ? null : new LayerSource(cPtr, false);
  }

  public String GetConnectStringFromFileName(String pszFileName, String pszDefDriverName) {
    return jniJNI.FeatureCanvas_GetConnectStringFromFileName(swigCPtr, this, pszFileName, pszDefDriverName);
  }

  public String GetRasterEnableFilter(int mode) {
    return jniJNI.FeatureCanvas_GetRasterEnableFilter(swigCPtr, this, mode);
  }

  public FeatureLayer CreateTemporaryLayer(FeatureType hFtType, boolean bAutoLoad) {
    long cPtr = jniJNI.FeatureCanvas_CreateTemporaryLayer(swigCPtr, this, FeatureType.getCPtr(hFtType), hFtType, bAutoLoad);
    return (cPtr == 0) ? null : new FeatureLayer(cPtr, false);
  }

  public void SetTerrainOptions(String strOptions) {
    jniJNI.FeatureCanvas_SetTerrainOptions(swigCPtr, this, strOptions);
  }

  public int ReadWorkspace(String strJWSFile) {
    return jniJNI.FeatureCanvas_ReadWorkspace(swigCPtr, this, strJWSFile);
  }

  public int WriteWorkspace(String strJWSFile) {
    return jniJNI.FeatureCanvas_WriteWorkspace(swigCPtr, this, strJWSFile);
  }

  public void SetSelectedFeature(Feature feature, boolean bAdd) {
    jniJNI.FeatureCanvas_SetSelectedFeature(swigCPtr, this, Feature.getCPtr(feature), feature, bAdd);
  }

  public String GetWorkspace() {
    return jniJNI.FeatureCanvas_GetWorkspace(swigCPtr, this);
  }

  public SpatialReference GetDisplaySpatialReference() {
    long cPtr = jniJNI.FeatureCanvas_GetDisplaySpatialReference(swigCPtr, this);
    return (cPtr == 0) ? null : new SpatialReference(cPtr, false);
  }

  public void SetDisplaySpatialReference(SpatialReference poVal) {
    jniJNI.FeatureCanvas_SetDisplaySpatialReference(swigCPtr, this, SpatialReference.getCPtr(poVal), poVal);
  }

  public void ForceStopRender() {
    jniJNI.FeatureCanvas_ForceStopRender(swigCPtr, this);
  }

  public void Destroy() {
    jniJNI.FeatureCanvas_Destroy(swigCPtr, this);
  }

}
