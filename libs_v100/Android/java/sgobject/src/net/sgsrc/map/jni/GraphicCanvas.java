/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.sgsrc.map.jni;

public class GraphicCanvas extends Canvas {
  private long swigCPtr;

  protected GraphicCanvas(long cPtr, boolean cMemoryOwn) {
    super(jniJNI.GraphicCanvas_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GraphicCanvas obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  private Object parentReference;

  protected static long getCPtrAndDisown(GraphicCanvas obj) {
    if (obj != null)
    {
        obj.swigCMemOwn= false;
        obj.parentReference = null;
    }
    return getCPtr(obj);
  }

  /* Ensure that the GC doesn't collect any parent instance set from Java */
  protected void addReference(Object reference) {
    parentReference = reference;
  }

  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof GraphicCanvas)
      equal = (((GraphicCanvas)obj).swigCPtr == this.swigCPtr);
    return equal;
  }

  public int hashCode() {
     return (int)swigCPtr;
  }


  public void Initialize(int handle) {
    jniJNI.GraphicCanvas_Initialize(swigCPtr, this, handle);
  }

  public void ReSize(int x, int y, int width, int height) {
    jniJNI.GraphicCanvas_ReSize(swigCPtr, this, x, y, width, height);
  }

  public void SetScreenMode(int h) {
    jniJNI.GraphicCanvas_SetScreenMode(swigCPtr, this, h);
  }

  public int GetScreenMode() {
    return jniJNI.GraphicCanvas_GetScreenMode(swigCPtr, this);
  }

  public void Add(String pszKey, Graphic hGrap) {
    jniJNI.GraphicCanvas_Add(swigCPtr, this, pszKey, Graphic.getCPtr(hGrap), hGrap);
  }

  public void Remove(Canvas hCvs, Graphic hGrap) {
    jniJNI.GraphicCanvas_Remove(swigCPtr, this, Canvas.getCPtr(hCvs), hCvs, Graphic.getCPtr(hGrap), hGrap);
  }

  public void Clear() {
    jniJNI.GraphicCanvas_Clear(swigCPtr, this);
  }

  public void RemoveFromKey(String pszKey) {
    jniJNI.GraphicCanvas_RemoveFromKey(swigCPtr, this, pszKey);
  }

  public Graphic GetTopGraphicAt(float mx, float my) {
    long cPtr = jniJNI.GraphicCanvas_GetTopGraphicAt(swigCPtr, this, mx, my);
    return (cPtr == 0) ? null : new Graphic(cPtr, false);
  }

  public AggregateGraphic GetGraphicsAt(float mx, float my) {
    long cPtr = jniJNI.GraphicCanvas_GetGraphicsAt(swigCPtr, this, mx, my);
    return (cPtr == 0) ? null : new AggregateGraphic(cPtr, false);
  }

  public void Destroy() {
    jniJNI.GraphicCanvas_Destroy(swigCPtr, this);
  }

  public void Invalidate() {
    jniJNI.GraphicCanvas_Invalidate(swigCPtr, this);
  }

}
