/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.sgsrc.map.jni;

import java.io.Serializable;

public class Canvas implements Serializable {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Canvas(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0)
        throw new RuntimeException();
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  
  public static long getCPtr(Canvas obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

	private static final long serialVersionUID = 7586864041942012990L;

  public int GetCanvasType() {
    return jniJNI.Canvas_GetCanvasType(swigCPtr, this);
  }

  public String GetTitle() {
    return jniJNI.Canvas_GetTitle(swigCPtr, this);
  }

  public void SetTitle(String pVal) {
    jniJNI.Canvas_SetTitle(swigCPtr, this, pVal);
  }

  public int GetState() {
    return jniJNI.Canvas_GetState(swigCPtr, this);
  }

  public void SetState(int newVal) {
    jniJNI.Canvas_SetState(swigCPtr, this, newVal);
  }

  public FeatureCanvas GetFeatureCanvas() {
    long cPtr = jniJNI.Canvas_GetFeatureCanvas(swigCPtr, this);
    return (cPtr == 0) ? null : new FeatureCanvas(cPtr, false);
  }

  public void SetFeatureCanvas(FeatureCanvas h) {
    jniJNI.Canvas_SetFeatureCanvas(swigCPtr, this, FeatureCanvas.getCPtr(h), h);
  }

  public int GetMapControl() {
    return jniJNI.Canvas_GetMapControl(swigCPtr, this);
  }

  public void SetMapControl(int newVal) {
    jniJNI.Canvas_SetMapControl(swigCPtr, this, newVal);
  }

  public void VisibleMapControl(int eCtlType, boolean bVisible) {
    jniJNI.Canvas_VisibleMapControl(swigCPtr, this, eCtlType, bVisible);
  }

  public int GetMapMoveMode() {
    return jniJNI.Canvas_GetMapMoveMode(swigCPtr, this);
  }

  public void SetMapMoveMode(int h) {
    jniJNI.Canvas_SetMapMoveMode(swigCPtr, this, h);
  }

  public int GetMapRotateMode() {
    return jniJNI.Canvas_GetMapRotateMode(swigCPtr, this);
  }

  public void SetMapRotateMode(int h) {
    jniJNI.Canvas_SetMapRotateMode(swigCPtr, this, h);
  }

  public void SetLocationSensor(LocationSensor h) {
    jniJNI.Canvas_SetLocationSensor(swigCPtr, this, LocationSensor.getCPtr(h), h);
  }

  public void SetMotionSensor(MotionSensor h) {
    jniJNI.Canvas_SetMotionSensor(swigCPtr, this, MotionSensor.getCPtr(h), h);
  }

  public void SetVideoSensor(VideoSensor h) {
    jniJNI.Canvas_SetVideoSensor(swigCPtr, this, VideoSensor.getCPtr(h), h);
  }

  public void RemoveSensor(Sensor h) {
    jniJNI.Canvas_RemoveSensor(swigCPtr, this, Sensor.getCPtr(h), h);
  }

  public void OnSensor(int h, int bStop) {
    jniJNI.Canvas_OnSensor(swigCPtr, this, h, bStop);
  }

  public Sensor GetSensor(int h) {
    long cPtr = jniJNI.Canvas_GetSensor(swigCPtr, this, h);
    return (cPtr == 0) ? null : new Sensor(cPtr, false);
  }

  public SpatialReference GetObjectiveSpatialReference() {
    long cPtr = jniJNI.Canvas_GetObjectiveSpatialReference(swigCPtr, this);
    return (cPtr == 0) ? null : new SpatialReference(cPtr, false);
  }

  public void SetObjectiveSpatialReference(SpatialReference poVal) {
    jniJNI.Canvas_SetObjectiveSpatialReference(swigCPtr, this, SpatialReference.getCPtr(poVal), poVal);
  }

  public void AddEventListener(Event evt) {
    jniJNI.Canvas_AddEventListener(swigCPtr, this, Event.getCPtr(evt), evt);
  }

  public void RemoveEventListener(Event evt) {
    jniJNI.Canvas_RemoveEventListener(swigCPtr, this, Event.getCPtr(evt), evt);
  }

  public boolean HasEventListener(Event evt) {
    return jniJNI.Canvas_HasEventListener(swigCPtr, this, Event.getCPtr(evt), evt);
  }

  public void FireEvent(String pszName, Parameters params) {
    jniJNI.Canvas_FireEvent(swigCPtr, this, pszName, Parameters.getCPtr(params), params);
  }

  public int GetHittestSize() {
    return jniJNI.Canvas_GetHittestSize(swigCPtr, this);
  }

  public void SetHittestSize(int nSize) {
    jniJNI.Canvas_SetHittestSize(swigCPtr, this, nSize);
  }

  public void ForceStopRender() {
    jniJNI.Canvas_ForceStopRender(swigCPtr, this);
  }

}
