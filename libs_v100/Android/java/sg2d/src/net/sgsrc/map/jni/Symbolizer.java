/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.sgsrc.map.jni;

public class Symbolizer {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Symbolizer(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0)
        throw new RuntimeException();
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  
  public static long getCPtr(Symbolizer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  private Object parentReference;

  protected static long getCPtrAndDisown(Symbolizer obj) {
    if (obj != null)
    {
        obj.swigCMemOwn= false;
        obj.parentReference = null;
    }
    return getCPtr(obj);
  }

  /* Ensure that the GC doesn't collect any parent instance set from Java */
  protected void addReference(Object reference) {
    parentReference = reference;
  }

  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof Symbolizer)
      equal = (((Symbolizer)obj).swigCPtr == this.swigCPtr);
    return equal;
  }

  public int hashCode() {
     return (int)swigCPtr;
  }


  public void Destroy() {
    jniJNI.Symbolizer_Destroy(swigCPtr, this);
  }

  public void SetStyle(String pszStyleString) {
    jniJNI.Symbolizer_SetStyle(swigCPtr, this, pszStyleString);
  }

  public String GetStyleString() {
    return jniJNI.Symbolizer_GetStyleString(swigCPtr, this);
  }

  public void ShowFeatureStyleWidget(Map2D hMap2D, LayerSource hLayerSource) {
    jniJNI.Symbolizer_ShowFeatureStyleWidget(swigCPtr, this, Map2D.getCPtr(hMap2D), hMap2D, LayerSource.getCPtr(hLayerSource), hLayerSource);
  }

  public int GetSymbolizerType() {
    return jniJNI.Symbolizer_GetSymbolizerType(swigCPtr, this);
  }

  public void SetSymbolizerType(int h) {
    jniJNI.Symbolizer_SetSymbolizerType(swigCPtr, this, h);
  }

  public Stroke GetStroke(String pszName) {
    long cPtr = jniJNI.Symbolizer_GetStroke(swigCPtr, this, pszName);
    return (cPtr == 0) ? null : new Stroke(cPtr, false);
  }

  public Stroke SetStroke(String pszName, Stroke poStroke) {
    long cPtr = jniJNI.Symbolizer_SetStroke(swigCPtr, this, pszName, Stroke.getCPtr(poStroke), poStroke);
    return (cPtr == 0) ? null : new Stroke(cPtr, false);
  }

  public Fill GetFill(String pszName) {
    long cPtr = jniJNI.Symbolizer_GetFill(swigCPtr, this, pszName);
    return (cPtr == 0) ? null : new Fill(cPtr, false);
  }

  public Fill SetFill(String pszName, Fill poFill) {
    long cPtr = jniJNI.Symbolizer_SetFill(swigCPtr, this, pszName, Fill.getCPtr(poFill), poFill);
    return (cPtr == 0) ? null : new Fill(cPtr, false);
  }

  public Mark GetMark(String pszName) {
    long cPtr = jniJNI.Symbolizer_GetMark(swigCPtr, this, pszName);
    return (cPtr == 0) ? null : new Mark(cPtr, false);
  }

  public Mark SetMark(String pszName, Mark poMark) {
    long cPtr = jniJNI.Symbolizer_SetMark(swigCPtr, this, pszName, Mark.getCPtr(poMark), poMark);
    return (cPtr == 0) ? null : new Mark(cPtr, false);
  }

  public Font GetFont(String pszName) {
    long cPtr = jniJNI.Symbolizer_GetFont(swigCPtr, this, pszName);
    return (cPtr == 0) ? null : new Font(cPtr, false);
  }

  public Font SetFont(String pszName, Font poFont) {
    long cPtr = jniJNI.Symbolizer_SetFont(swigCPtr, this, pszName, Font.getCPtr(poFont), poFont);
    return (cPtr == 0) ? null : new Font(cPtr, false);
  }

  public void Add(String pszName, String pszStyle) {
    jniJNI.Symbolizer_Add(swigCPtr, this, pszName, pszStyle);
  }

}
