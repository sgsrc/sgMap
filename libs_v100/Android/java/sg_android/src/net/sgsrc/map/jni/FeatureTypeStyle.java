/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.sgsrc.map.jni;

public class FeatureTypeStyle {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected FeatureTypeStyle(long cPtr, boolean cMemoryOwn) {
    if (cPtr == 0)
        throw new RuntimeException();
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  
  public static long getCPtr(FeatureTypeStyle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  private Object parentReference;

  protected static long getCPtrAndDisown(FeatureTypeStyle obj) {
    if (obj != null)
    {
        obj.swigCMemOwn= false;
        obj.parentReference = null;
    }
    return getCPtr(obj);
  }

  /* Ensure that the GC doesn't collect any parent instance set from Java */
  protected void addReference(Object reference) {
    parentReference = reference;
  }

  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof FeatureTypeStyle)
      equal = (((FeatureTypeStyle)obj).swigCPtr == this.swigCPtr);
    return equal;
  }

  public int hashCode() {
     return (int)swigCPtr;
  }


  public void Destroy() {
    jniJNI.FeatureTypeStyle_Destroy(swigCPtr, this);
  }

  public int GetSize() {
    return jniJNI.FeatureTypeStyle_GetSize(swigCPtr, this);
  }

  public int GetStyleType() {
    return jniJNI.FeatureTypeStyle_GetStyleType(swigCPtr, this);
  }

  public Symbolizer GetElseFilterFeatureStyle() {
    long cPtr = jniJNI.FeatureTypeStyle_GetElseFilterFeatureStyle(swigCPtr, this);
    return (cPtr == 0) ? null : new Symbolizer(cPtr, false);
  }

  public void SetElseFilterFeatureStyle(Symbolizer style) {
    jniJNI.FeatureTypeStyle_SetElseFilterFeatureStyle(swigCPtr, this, Symbolizer.getCPtr(style), style);
  }

  public void AddRule(FeatureTypeStyleRule rule) {
    jniJNI.FeatureTypeStyle_AddRule(swigCPtr, this, FeatureTypeStyleRule.getCPtr(rule), rule);
  }

  public FeatureTypeStyleRule GetRule(int val) {
    long cPtr = jniJNI.FeatureTypeStyle_GetRule(swigCPtr, this, val);
    return (cPtr == 0) ? null : new FeatureTypeStyleRule(cPtr, false);
  }

  public void RemoveRule(FeatureTypeStyleRule rule) {
    jniJNI.FeatureTypeStyle_RemoveRule(swigCPtr, this, FeatureTypeStyleRule.getCPtr(rule), rule);
  }

  public void RemoveAll() {
    jniJNI.FeatureTypeStyle_RemoveAll(swigCPtr, this);
  }

  public static FeatureTypeStyle ReadXML(String filename) {
    long cPtr = jniJNI.FeatureTypeStyle_ReadXML(filename);
    return (cPtr == 0) ? null : new FeatureTypeStyle(cPtr, false);
  }

  public void WriteXML(String filename) {
    jniJNI.FeatureTypeStyle_WriteXML(swigCPtr, this, filename);
  }

  public String GetURL() {
    return jniJNI.FeatureTypeStyle_GetURL(swigCPtr, this);
  }

  public void SetURL(String url) {
    jniJNI.FeatureTypeStyle_SetURL(swigCPtr, this, url);
  }

}
